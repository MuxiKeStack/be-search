// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/MuxiKeStack/be-search/events"
	"github.com/MuxiKeStack/be-search/grpc"
	"github.com/MuxiKeStack/be-search/ioc"
	"github.com/MuxiKeStack/be-search/repository"
	"github.com/MuxiKeStack/be-search/repository/dao"
	"github.com/MuxiKeStack/be-search/service"
)

// Injectors from wire.go:

func InitApp() *App {
	client := ioc.InitESClient()
	courseDAO := dao.NewCourseElasticDAO(client)
	courseRepository := repository.NewCourseRepository(courseDAO)
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	historyDAO := dao.NewSearchHistoryGORMDAO(db)
	historyRepository := repository.NewHistoryRepository(historyDAO)
	searchService := service.NewSearchService(courseRepository, historyRepository, logger)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	clientv3Client := ioc.InitEtcdClient()
	server := ioc.InitGRPCxKratosServer(searchServiceServer, clientv3Client, logger)
	saramaClient := ioc.InitKafka()
	syncService := service.NewSyncService(courseRepository)
	mySQLBinlogConsumer := events.NewMySQLBinlogConsumer(saramaClient, logger, syncService)
	v := ioc.InitConsumers(mySQLBinlogConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}
